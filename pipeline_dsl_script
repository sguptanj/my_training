pipeline {
    agent {
        label "master"
    }
    tools {
        // Note: This should match with the tool name configured in jenkins instance
        maven "Maven 3.6.0"
    }
    environment {
        // This can be nexus 2 or nexus 3
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // This is address of the Nexus
        NEXUS_URL = "localhost:8081"
        // The name of the repository where the artifact has to be uploaded
        NEXUS_REPOSITORY = "repository-example"
        // Jenkins credential id to authenticate to Nexus OSS
        // nexus-user-credentials
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
    }
    stages {
        stage("Clone code from VCS") {
            steps {
                script {
                    // Cloning from the git
                   git credentials  Id: 'eccf8fd4-b099-4a7e-8774-9dc5638b730e', url: 'https://gitlab.com/ot-devops-ninja/batch9/spring3hibernate.git'
            }
            }
        }
        stage("Maven Build") {
            steps {
                script {
                    // maven package
                    sh "mvn package -DskipTests=true"
                }
            }
        }
         stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step,
                    // this step 'readMavenPom' is including
                    pom = readMavenPom file: "pom.xml";

                    // File built artifact under the target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");

                    // Print some info from the artifacts found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"

                    // Extract the path of the artifact found
                    artifactPath = filesByGlob[0].path;

                    // Assign to a boolean response verifing If the artifact name exist
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                 // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                                // Lets upload the pom.xml file for additional information for Transit
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
}
